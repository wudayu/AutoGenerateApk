//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.movitech.grande.fragment;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.movitech.grande.MainApp_;
import com.movitech.grande.haerbin.R.layout;
import com.movitech.grande.net.NetHandler_;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class CustomerRecordFragment_
    extends CustomerRecordFragment
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    public View findViewById(int id) {
        if (contentView_ == null) {
            return null;
        }
        return contentView_.findViewById(id);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(layout.fragment_customer_record, container, false);
        }
        return contentView_;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        mApp = MainApp_.getInstance();
        netHandler = NetHandler_.getInstance_(getActivity());
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static CustomerRecordFragment_.FragmentBuilder_ builder() {
        return new CustomerRecordFragment_.FragmentBuilder_();
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        tvRemainValidityData = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_remain_validity_data));
        tvRecomBuild = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_recom_build));
        ivImportantClient = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_important_client));
        rlCustomerImage = ((RelativeLayout) hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_customer_image));
        tvAverageCommissionData = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_average_commission_data));
        tvStatuOk = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_statu_ok));
        tvImportantClient = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_important_client));
        tvCustomerTel = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_customer_tel));
        ivCustomerAvator = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_customer_avator));
        tvCustomerName = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_customer_name));
        lvCustomerRecord = ((ListView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.lv_customer_record));
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_important_client);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        CustomerRecordFragment_.this.ivImportantClient();
                    }

                }
                );
            }
        }
        afterViews();
    }

    @Override
    public void goBackMainThreadFav(final String msg, final boolean success, final String isLike) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                CustomerRecordFragment_.super.goBackMainThreadFav(msg, success, isLike);
            }

        }
        );
    }

    @Override
    public void goBackMainIsCollect(final String msg, final boolean succeed) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                CustomerRecordFragment_.super.goBackMainIsCollect(msg, succeed);
            }

        }
        );
    }

    @Override
    public void doLoadImportantClient(final String isLike) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    CustomerRecordFragment_.super.doLoadImportantClient(isLike);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void doLoadIsCollect() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    CustomerRecordFragment_.super.doLoadIsCollect();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class FragmentBuilder_ {

        private Bundle args_;

        private FragmentBuilder_() {
            args_ = new Bundle();
        }

        public CustomerRecordFragment build() {
            CustomerRecordFragment_ fragment_ = new CustomerRecordFragment_();
            fragment_.setArguments(args_);
            return fragment_;
        }

    }

}
