//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.movitech.grande.fragment;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.movitech.grande.MainApp_;
import com.movitech.grande.haerbin.R.layout;
import com.movitech.grande.net.NetHandler_;
import com.movitech.grande.views.LoadDataListView;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class CommissionWaitFragment_
    extends CommissionWaitFragment
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    public View findViewById(int id) {
        if (contentView_ == null) {
            return null;
        }
        return contentView_.findViewById(id);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(layout.fragment_commission, container, false);
        }
        return contentView_;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        mApp = MainApp_.getInstance();
        netHandler = NetHandler_.getInstance_(getActivity());
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static CommissionWaitFragment_.FragmentBuilder_ builder() {
        return new CommissionWaitFragment_.FragmentBuilder_();
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        rlBottom = ((RelativeLayout) hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_bottom));
        tvCommission = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_commission));
        lvCommission = ((LoadDataListView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.lv_commission));
        tvApplyCount = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_apply_count));
        tvCommissionCount = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_commission_count));
        btnClickApply = ((Button) hasViews.findViewById(com.movitech.grande.haerbin.R.id.btn_click_apply));
        tvCommissionUnit = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_commission_unit));
        cbCheck = ((CheckBox) hasViews.findViewById(com.movitech.grande.haerbin.R.id.cb_check));
        afterViews();
    }

    @Override
    public void doBindData() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                CommissionWaitFragment_.super.doBindData();
            }

        }
        );
    }

    @Override
    public void doBindDataApplyCommission() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                CommissionWaitFragment_.super.doBindDataApplyCommission();
            }

        }
        );
    }

    @Override
    public void addCommissionItems() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                CommissionWaitFragment_.super.addCommissionItems();
            }

        }
        );
    }

    @Override
    public void loadNewForCommission() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    CommissionWaitFragment_.super.loadNewForCommission();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void doLoadCommissionApplyData(final String brokerId, final String[] id) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    CommissionWaitFragment_.super.doLoadCommissionApplyData(brokerId, id);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void doLoadDataAndBindData() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    CommissionWaitFragment_.super.doLoadDataAndBindData();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class FragmentBuilder_ {

        private Bundle args_;

        private FragmentBuilder_() {
            args_ = new Bundle();
        }

        public CommissionWaitFragment build() {
            CommissionWaitFragment_ fragment_ = new CommissionWaitFragment_();
            fragment_.setArguments(args_);
            return fragment_;
        }

    }

}
