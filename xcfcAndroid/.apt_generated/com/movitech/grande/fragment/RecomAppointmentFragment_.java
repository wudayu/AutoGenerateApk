//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.movitech.grande.fragment;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.movitech.grande.MainApp_;
import com.movitech.grande.haerbin.R.layout;
import com.movitech.grande.net.NetHandler_;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class RecomAppointmentFragment_
    extends RecomAppointmentFragment
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    public View findViewById(int id) {
        if (contentView_ == null) {
            return null;
        }
        return contentView_.findViewById(id);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(layout.fragment_recom_appointment, container, false);
        }
        return contentView_;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        mApp = MainApp_.getInstance();
        netHandler = NetHandler_.getInstance_(getActivity());
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static RecomAppointmentFragment_.FragmentBuilder_ builder() {
        return new RecomAppointmentFragment_.FragmentBuilder_();
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        ivAppointmentTime = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_appointment_time));
        txtIntentCity = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.txt_intent_city));
        txtIntentHouses = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.txt_intent_houses));
        ivCancelAppointmentTime = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_cancel_appointment_time));
        ivIntentCity = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_intent_city));
        txtRemark = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.txt_remark));
        edtIntentHouses = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_intent_houses));
        edtContactWay = ((EditText) hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_contact_way));
        edtAppointmentDate = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_appointment_date));
        ivContactManAppointment = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_contact_man_appointment));
        txtContactWay = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.txt_contact_way));
        ivCancelIntentHouses = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_cancel_intent_houses));
        ivCancelContactWay = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_cancel_contact_way));
        rlIntentHouseRight = ((RelativeLayout) hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_intent_house_right));
        edtIntentCity = ((EditText) hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_intent_city));
        ivIntentNote = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_intent_note));
        ivCancelManAppointment = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_cancel_man_appointment));
        rlAppointDate = ((RelativeLayout) hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_appoint_date));
        ivIntentHouses = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_intent_houses));
        btnAppointmentImmediate = ((Button) hasViews.findViewById(com.movitech.grande.haerbin.R.id.btn_appointment_immediate));
        edtRemark = ((EditText) hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_remark));
        ivManAppointment = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_man_appointment));
        edtManAppointment = ((EditText) hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_man_appointment));
        llSheet = ((LinearLayout) hasViews.findViewById(com.movitech.grande.haerbin.R.id.ll_sheet));
        ivCancelRemark = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_cancel_remark));
        txtIntentCityUnit = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.txt_intent_city_unit));
        txtAppointmentTime = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.txt_appointment_time));
        txtManAppointment = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.txt_man_appointment));
        ivContactWay = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_contact_way));
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_intent_city);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        RecomAppointmentFragment_.this.edtIntentCity();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.btn_appointment_immediate);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        RecomAppointmentFragment_.this.btnAppointmentImmediate();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_intent_house_right);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        RecomAppointmentFragment_.this.rlIntentHouseRight();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_appoint_date);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        RecomAppointmentFragment_.this.rlAppointDate();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_contact_man_appointment);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        RecomAppointmentFragment_.this.ivContactManAppointment();
                    }

                }
                );
            }
        }
        afterViews();
    }

    @Override
    public void doBindDataIntentHouse() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RecomAppointmentFragment_.super.doBindDataIntentHouse();
            }

        }
        );
    }

    @Override
    public void addHousesItems() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RecomAppointmentFragment_.super.addHousesItems();
            }

        }
        );
    }

    @Override
    public void doBindData() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RecomAppointmentFragment_.super.doBindData();
            }

        }
        );
    }

    @Override
    public void doBindDataRecommended() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                RecomAppointmentFragment_.super.doBindDataRecommended();
            }

        }
        );
    }

    @Override
    public void loadNewForHouses() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    RecomAppointmentFragment_.super.loadNewForHouses();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void doLoadDataAndBindDataIntentHouse() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    RecomAppointmentFragment_.super.doLoadDataAndBindDataIntentHouse();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void queryDistrict() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    RecomAppointmentFragment_.super.queryDistrict();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void doLoadAppointmentRequest(final String clientName, final String clientPhone, final String recommendedBuilding, final String brokerId, final String bespeakMark, final String bespeakTime) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("queryData", 0, "") {


            @Override
            public void execute() {
                try {
                    RecomAppointmentFragment_.super.doLoadAppointmentRequest(clientName, clientPhone, recommendedBuilding, brokerId, bespeakMark, bespeakTime);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class FragmentBuilder_ {

        private Bundle args_;

        private FragmentBuilder_() {
            args_ = new Bundle();
        }

        public RecomAppointmentFragment build() {
            RecomAppointmentFragment_ fragment_ = new RecomAppointmentFragment_();
            fragment_.setArguments(args_);
            return fragment_;
        }

    }

}
