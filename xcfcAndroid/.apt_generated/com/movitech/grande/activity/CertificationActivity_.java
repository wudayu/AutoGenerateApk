//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.movitech.grande.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.app.Fragment;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.movitech.grande.MainApp_;
import com.movitech.grande.generic.ImageUtils_;
import com.movitech.grande.haerbin.R.layout;
import com.movitech.grande.net.NetHandler_;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class CertificationActivity_
    extends CertificationActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.activity_certification);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        mApp = MainApp_.getInstance();
        netHandler = NetHandler_.getInstance_(this);
        imageUtils = ImageUtils_.getInstance_(this);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static CertificationActivity_.IntentBuilder_ intent(Context context) {
        return new CertificationActivity_.IntentBuilder_(context);
    }

    public static CertificationActivity_.IntentBuilder_ intent(Fragment supportFragment) {
        return new CertificationActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        tvUserMale = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_user_male));
        edtBankName = ((EditText) hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_bank_name));
        certificationStepCommit = ((Button) hasViews.findViewById(com.movitech.grande.haerbin.R.id.certification_step_commit));
        rlCardReverse = ((RelativeLayout) hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_card_reverse));
        rlCardFront = ((RelativeLayout) hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_card_front));
        edtRealName = ((EditText) hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_real_name));
        edtCardNo = ((EditText) hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_card_no));
        tvUserFemale = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_user_female));
        ivBack = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_back));
        rlTop = ((RelativeLayout) hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_top));
        ivCardReverse = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_card_reverse));
        llFemaleSelected = ((LinearLayout) hasViews.findViewById(com.movitech.grande.haerbin.R.id.ll_female_selected));
        ivCardFront = ((ImageView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_card_front));
        tvUserBirthEdit = ((TextView) hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_user_birth_edit));
        edtBankAccount = ((EditText) hasViews.findViewById(com.movitech.grande.haerbin.R.id.edt_bank_account));
        llMaleSelected = ((LinearLayout) hasViews.findViewById(com.movitech.grande.haerbin.R.id.ll_male_selected));
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.ll_female_selected);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        CertificationActivity_.this.llFemaleSelected();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.iv_back);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        CertificationActivity_.this.ivBack();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.ll_male_selected);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        CertificationActivity_.this.llMaleSelected();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.certification_step_commit);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        CertificationActivity_.this.certificationStepCommit();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_card_front);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        CertificationActivity_.this.rlCardFront();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.rl_card_reverse);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        CertificationActivity_.this.rlCardReverse();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.movitech.grande.haerbin.R.id.tv_user_birth_edit);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        CertificationActivity_.this.tvUserBirthEdit();
                    }

                }
                );
            }
        }
        afterViews();
    }

    @Override
    public void finishUploadImage(final String msg, final boolean success) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                CertificationActivity_.super.finishUploadImage(msg, success);
            }

        }
        );
    }

    @Override
    public void goBackMainThread(final String msg, final boolean success) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                CertificationActivity_.super.goBackMainThread(msg, success);
            }

        }
        );
    }

    @Override
    public void access(final String filePath) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    CertificationActivity_.super.access(filePath);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void access(final String id, final String realName, final String birthday, final String sex, final String bankName, final String bankNum, final String idCardNum, final String idCardImg, final String idCardNegImg) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    CertificationActivity_.super.access(id, realName, birthday, sex, bankName, bankNum, idCardNum, idCardImg, idCardNegImg);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;
        private Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, CertificationActivity_.class);
        }

        public IntentBuilder_(Fragment fragment) {
            fragmentSupport_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, CertificationActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public CertificationActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent_, requestCode);
            } else {
                if (context_ instanceof Activity) {
                    ((Activity) context_).startActivityForResult(intent_, requestCode);
                } else {
                    context_.startActivity(intent_);
                }
            }
        }

    }

}
