//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.movitech.grande.net.client;

import java.util.Collections;
import java.util.HashMap;
import com.movitech.grande.net.converter.MappingJacksonDavidHttpMessageConverter;
import com.movitech.grande.net.protocol.XcfcImageReturnResult;
import org.androidannotations.api.rest.RestErrorHandler;
import org.springframework.http.HttpAuthentication;
import org.springframework.http.HttpBasicAuthentication;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.converter.ByteArrayHttpMessageConverter;
import org.springframework.http.converter.FormHttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

public final class ImageClient_
    implements ImageClient
{

    private RestTemplate restTemplate;
    private HttpAuthentication authentication;
    private HashMap<String, String> availableCookies;
    private HashMap<String, String> availableHeaders;
    private RestErrorHandler restErrorHandler;
    private String rootUrl;

    public ImageClient_() {
        restTemplate = new RestTemplate();
        availableCookies = new HashMap<String, String>();
        availableHeaders = new HashMap<String, String>();
        rootUrl = "";
        restTemplate.getMessageConverters().add(new ByteArrayHttpMessageConverter());
        restTemplate.getMessageConverters().add(new FormHttpMessageConverter());
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter());
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
        restTemplate.getMessageConverters().add(new MappingJacksonDavidHttpMessageConverter());
    }

    @Override
    public RestTemplate getRestTemplate() {
        return restTemplate;
    }

    @Override
    public void setRestTemplate(RestTemplate arg0) {
        this.restTemplate = arg0;
    }

    @Override
    public void setHttpBasicAuth(String arg0, String arg1) {
        this.authentication = new HttpBasicAuthentication(arg0, arg1);
    }

    @Override
    public void setAuthentication(HttpAuthentication arg0) {
        this.authentication = arg0;
    }

    @Override
    public String getCookie(String arg0) {
        return availableCookies.get(arg0);
    }

    @Override
    public String getHeader(String arg0) {
        return availableHeaders.get(arg0);
    }

    @Override
    public void setCookie(String arg0, String arg1) {
        availableCookies.put(arg0, arg1);
    }

    @Override
    public void setHeader(String arg0, String arg1) {
        availableHeaders.put(arg0, arg1);
    }

    @Override
    public void setRestErrorHandler(RestErrorHandler arg0) {
        this.restErrorHandler = arg0;
    }

    @Override
    public XcfcImageReturnResult uploadPic(String url, MultiValueMap<String, Object> params) {
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("text/html")));
        httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
        httpHeaders.set("Content-Disposition", availableHeaders.get("Content-Disposition"));
        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(params, httpHeaders);
        HashMap<String, Object> urlVariables = new HashMap<String, Object>();
        urlVariables.put("url", url);
        try {
            return restTemplate.exchange(rootUrl.concat("{url}/rest/broker/upload"), HttpMethod.POST, requestEntity, XcfcImageReturnResult.class, urlVariables).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

    @Override
    public XcfcImageReturnResult uploadHeader(String url, String userId, MultiValueMap<String, Object> params) {
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("text/html")));
        httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
        httpHeaders.set("Content-Disposition", availableHeaders.get("Content-Disposition"));
        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(params, httpHeaders);
        HashMap<String, Object> urlVariables = new HashMap<String, Object>();
        urlVariables.put("userId", userId);
        urlVariables.put("url", url);
        try {
            return restTemplate.exchange(rootUrl.concat("{url}/rest/broker/updateBrokerPic?id={userId}"), HttpMethod.POST, requestEntity, XcfcImageReturnResult.class, urlVariables).getBody();
        } catch (RestClientException e) {
            if (restErrorHandler!= null) {
                restErrorHandler.onRestClientExceptionThrown(e);
                return null;
            } else {
                throw e;
            }
        }
    }

}
